// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: session.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SessionType int32

const (
	SessionType_DefaultSession SessionType = 0
	SessionType_ReshareSession SessionType = 1
	SessionType_KeygenSession  SessionType = 2
)

var SessionType_name = map[int32]string{
	0: "DefaultSession",
	1: "ReshareSession",
	2: "KeygenSession",
}

var SessionType_value = map[string]int32{
	"DefaultSession": 0,
	"ReshareSession": 1,
	"KeygenSession":  2,
}

func (x SessionType) String() string {
	return proto.EnumName(SessionType_name, int32(x))
}

func (SessionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{0}
}

type SessionStatus int32

const (
	SessionStatus_SessionProcessing SessionStatus = 0
	SessionStatus_SessionFailed     SessionStatus = 1
	SessionStatus_SessionSucceeded  SessionStatus = 3
)

var SessionStatus_name = map[int32]string{
	0: "SessionProcessing",
	1: "SessionFailed",
	3: "SessionSucceeded",
}

var SessionStatus_value = map[string]int32{
	"SessionProcessing": 0,
	"SessionFailed":     1,
	"SessionSucceeded":  3,
}

func (x SessionStatus) String() string {
	return proto.EnumName(SessionStatus_name, int32(x))
}

func (SessionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{1}
}

type Session struct {
	Id         uint64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status     SessionStatus `protobuf:"varint,2,opt,name=status,proto3,enum=SessionStatus" json:"status,omitempty"`
	StartBlock uint64        `protobuf:"varint,3,opt,name=startBlock,proto3" json:"startBlock,omitempty"`
	EndBlock   uint64        `protobuf:"varint,4,opt,name=endBlock,proto3" json:"endBlock,omitempty"`
	Type       SessionType   `protobuf:"varint,5,opt,name=type,proto3,enum=SessionType" json:"type,omitempty"`
	Data       *types.Any    `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Session) Reset()         { *m = Session{} }
func (m *Session) String() string { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()    {}
func (*Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{0}
}
func (m *Session) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Session.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session.Merge(m, src)
}
func (m *Session) XXX_Size() int {
	return m.Size()
}
func (m *Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Session proto.InternalMessageInfo

func (m *Session) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Session) GetStatus() SessionStatus {
	if m != nil {
		return m.Status
	}
	return SessionStatus_SessionProcessing
}

func (m *Session) GetStartBlock() uint64 {
	if m != nil {
		return m.StartBlock
	}
	return 0
}

func (m *Session) GetEndBlock() uint64 {
	if m != nil {
		return m.EndBlock
	}
	return 0
}

func (m *Session) GetType() SessionType {
	if m != nil {
		return m.Type
	}
	return SessionType_DefaultSession
}

func (m *Session) GetData() *types.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

type DefaultSessionData struct {
	Parties   []string `protobuf:"bytes,1,rep,name=parties,proto3" json:"parties,omitempty"`
	Proposer  string   `protobuf:"bytes,2,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Indexes   []string `protobuf:"bytes,3,rep,name=indexes,proto3" json:"indexes,omitempty"`
	Root      string   `protobuf:"bytes,4,opt,name=root,proto3" json:"root,omitempty"`
	Accepted  []string `protobuf:"bytes,5,rep,name=accepted,proto3" json:"accepted,omitempty"`
	Signature string   `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *DefaultSessionData) Reset()         { *m = DefaultSessionData{} }
func (m *DefaultSessionData) String() string { return proto.CompactTextString(m) }
func (*DefaultSessionData) ProtoMessage()    {}
func (*DefaultSessionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{1}
}
func (m *DefaultSessionData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefaultSessionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DefaultSessionData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DefaultSessionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultSessionData.Merge(m, src)
}
func (m *DefaultSessionData) XXX_Size() int {
	return m.Size()
}
func (m *DefaultSessionData) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultSessionData.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultSessionData proto.InternalMessageInfo

func (m *DefaultSessionData) GetParties() []string {
	if m != nil {
		return m.Parties
	}
	return nil
}

func (m *DefaultSessionData) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *DefaultSessionData) GetIndexes() []string {
	if m != nil {
		return m.Indexes
	}
	return nil
}

func (m *DefaultSessionData) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

func (m *DefaultSessionData) GetAccepted() []string {
	if m != nil {
		return m.Accepted
	}
	return nil
}

func (m *DefaultSessionData) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type ReshareSessionData struct {
	Parties      []string `protobuf:"bytes,1,rep,name=parties,proto3" json:"parties,omitempty"`
	Proposer     string   `protobuf:"bytes,2,opt,name=proposer,proto3" json:"proposer,omitempty"`
	OldKey       string   `protobuf:"bytes,3,opt,name=oldKey,proto3" json:"oldKey,omitempty"`
	NewKey       string   `protobuf:"bytes,4,opt,name=newKey,proto3" json:"newKey,omitempty"`
	KeySignature string   `protobuf:"bytes,5,opt,name=keySignature,proto3" json:"keySignature,omitempty"`
	Signature    string   `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	Root         string   `protobuf:"bytes,7,opt,name=root,proto3" json:"root,omitempty"`
}

func (m *ReshareSessionData) Reset()         { *m = ReshareSessionData{} }
func (m *ReshareSessionData) String() string { return proto.CompactTextString(m) }
func (*ReshareSessionData) ProtoMessage()    {}
func (*ReshareSessionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{2}
}
func (m *ReshareSessionData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReshareSessionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReshareSessionData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReshareSessionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReshareSessionData.Merge(m, src)
}
func (m *ReshareSessionData) XXX_Size() int {
	return m.Size()
}
func (m *ReshareSessionData) XXX_DiscardUnknown() {
	xxx_messageInfo_ReshareSessionData.DiscardUnknown(m)
}

var xxx_messageInfo_ReshareSessionData proto.InternalMessageInfo

func (m *ReshareSessionData) GetParties() []string {
	if m != nil {
		return m.Parties
	}
	return nil
}

func (m *ReshareSessionData) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *ReshareSessionData) GetOldKey() string {
	if m != nil {
		return m.OldKey
	}
	return ""
}

func (m *ReshareSessionData) GetNewKey() string {
	if m != nil {
		return m.NewKey
	}
	return ""
}

func (m *ReshareSessionData) GetKeySignature() string {
	if m != nil {
		return m.KeySignature
	}
	return ""
}

func (m *ReshareSessionData) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *ReshareSessionData) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

type KeygenSessionData struct {
	Parties []string `protobuf:"bytes,1,rep,name=parties,proto3" json:"parties,omitempty"`
	Key     string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *KeygenSessionData) Reset()         { *m = KeygenSessionData{} }
func (m *KeygenSessionData) String() string { return proto.CompactTextString(m) }
func (*KeygenSessionData) ProtoMessage()    {}
func (*KeygenSessionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{3}
}
func (m *KeygenSessionData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeygenSessionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeygenSessionData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeygenSessionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeygenSessionData.Merge(m, src)
}
func (m *KeygenSessionData) XXX_Size() int {
	return m.Size()
}
func (m *KeygenSessionData) XXX_DiscardUnknown() {
	xxx_messageInfo_KeygenSessionData.DiscardUnknown(m)
}

var xxx_messageInfo_KeygenSessionData proto.InternalMessageInfo

func (m *KeygenSessionData) GetParties() []string {
	if m != nil {
		return m.Parties
	}
	return nil
}

func (m *KeygenSessionData) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func init() {
	proto.RegisterEnum("SessionType", SessionType_name, SessionType_value)
	proto.RegisterEnum("SessionStatus", SessionStatus_name, SessionStatus_value)
	proto.RegisterType((*Session)(nil), "Session")
	proto.RegisterType((*DefaultSessionData)(nil), "DefaultSessionData")
	proto.RegisterType((*ReshareSessionData)(nil), "ReshareSessionData")
	proto.RegisterType((*KeygenSessionData)(nil), "KeygenSessionData")
}

func init() { proto.RegisterFile("session.proto", fileDescriptor_3a6be1b361fa6f14) }

var fileDescriptor_3a6be1b361fa6f14 = []byte{
	// 503 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xcd, 0x26, 0x69, 0x82, 0xa7, 0x4d, 0xe4, 0xac, 0x0a, 0x32, 0x15, 0xb2, 0xa2, 0x1c, 0x20,
	0xaa, 0x84, 0x2d, 0x95, 0x0f, 0x40, 0xad, 0x2a, 0x84, 0xd4, 0x03, 0x68, 0xc3, 0x89, 0xdb, 0xc6,
	0x3b, 0x35, 0x56, 0x5c, 0xaf, 0xb5, 0xbb, 0x01, 0xfc, 0x17, 0x7c, 0x0b, 0x5f, 0x01, 0xb7, 0x1c,
	0x39, 0xa2, 0xe4, 0x47, 0xd0, 0xae, 0x9d, 0xb4, 0xbe, 0x20, 0x24, 0x0e, 0x96, 0xe6, 0xbd, 0x37,
	0xe3, 0x99, 0x37, 0x3b, 0x30, 0xd2, 0xa8, 0x75, 0x26, 0x8b, 0xa8, 0x54, 0xd2, 0xc8, 0xb3, 0xa7,
	0xa9, 0x94, 0x69, 0x8e, 0xb1, 0x43, 0xcb, 0xf5, 0x6d, 0xcc, 0x8b, 0xaa, 0x96, 0x66, 0x3f, 0x09,
	0x0c, 0x17, 0x75, 0x32, 0x1d, 0x43, 0x37, 0x13, 0x01, 0x99, 0x92, 0x79, 0x9f, 0x75, 0x33, 0x41,
	0x9f, 0xc3, 0x40, 0x1b, 0x6e, 0xd6, 0x3a, 0xe8, 0x4e, 0xc9, 0x7c, 0x7c, 0x31, 0x8e, 0x9a, 0xcc,
	0x85, 0x63, 0x59, 0xa3, 0xd2, 0x10, 0x40, 0x1b, 0xae, 0xcc, 0x55, 0x2e, 0x93, 0x55, 0xd0, 0x73,
	0xf5, 0x0f, 0x18, 0x7a, 0x06, 0x8f, 0xb0, 0x10, 0xb5, 0xda, 0x77, 0xea, 0x01, 0xd3, 0x29, 0xf4,
	0x4d, 0x55, 0x62, 0x70, 0xe4, 0x3a, 0x9c, 0xec, 0x3b, 0x7c, 0xa8, 0x4a, 0x64, 0x4e, 0xa1, 0x73,
	0xe8, 0x0b, 0x6e, 0x78, 0x30, 0x98, 0x92, 0xf9, 0xf1, 0xc5, 0x69, 0x54, 0x7b, 0x89, 0xf6, 0x5e,
	0xa2, 0xcb, 0xa2, 0x62, 0x2e, 0x63, 0xf6, 0x9d, 0x00, 0xbd, 0xc6, 0x5b, 0xbe, 0xce, 0x4d, 0xf3,
	0x9b, 0x6b, 0x6e, 0x38, 0x0d, 0x60, 0x58, 0x72, 0x65, 0x32, 0xd4, 0x01, 0x99, 0xf6, 0xe6, 0x1e,
	0xdb, 0x43, 0x3b, 0x58, 0xa9, 0x64, 0x29, 0x35, 0x2a, 0x67, 0xd1, 0x63, 0x07, 0x6c, 0xab, 0xb2,
	0x42, 0xe0, 0x57, 0xd4, 0x41, 0xaf, 0xae, 0x6a, 0x20, 0xa5, 0xd0, 0x57, 0x52, 0x1a, 0x67, 0xc5,
	0x63, 0x2e, 0xb6, 0x7f, 0xe2, 0x49, 0x82, 0xa5, 0x41, 0x11, 0x1c, 0xb9, 0xf4, 0x03, 0xa6, 0xcf,
	0xc0, 0xd3, 0x59, 0x5a, 0x70, 0xb3, 0x56, 0xe8, 0x5c, 0x78, 0xec, 0x9e, 0x98, 0x6d, 0x08, 0x50,
	0x86, 0xfa, 0x13, 0x57, 0xf8, 0xff, 0x43, 0x3f, 0x81, 0x81, 0xcc, 0xc5, 0x0d, 0x56, 0xee, 0x15,
	0x3c, 0xd6, 0x20, 0xcb, 0x17, 0xf8, 0xc5, 0xf2, 0xf5, 0xd0, 0x0d, 0xa2, 0x33, 0x38, 0x59, 0x61,
	0xb5, 0x38, 0x4c, 0x77, 0xe4, 0xd4, 0x16, 0xf7, 0xf7, 0xf1, 0x0f, 0xcb, 0x18, 0xde, 0x2f, 0x63,
	0xf6, 0x1a, 0x26, 0x37, 0x58, 0xa5, 0x58, 0xfc, 0x9b, 0x21, 0x1f, 0x7a, 0x2b, 0xac, 0x1a, 0x2f,
	0x36, 0x3c, 0x7f, 0x0b, 0xc7, 0x0f, 0xee, 0x80, 0x52, 0x18, 0xb7, 0x9f, 0xd5, 0xef, 0x58, 0xae,
	0xbd, 0x35, 0x9f, 0xd0, 0x09, 0x8c, 0x5a, 0x7d, 0xfd, 0xee, 0xf9, 0x3b, 0x18, 0xb5, 0x6e, 0x96,
	0x3e, 0x86, 0x49, 0x43, 0xbc, 0x57, 0x32, 0xb1, 0x51, 0x91, 0xfa, 0x1d, 0x5b, 0xda, 0xd0, 0x6f,
	0x78, 0x96, 0xa3, 0xf0, 0x09, 0x3d, 0x05, 0x7f, 0x5f, 0xba, 0x4e, 0x12, 0x44, 0x81, 0xc2, 0xef,
	0x5d, 0x5d, 0xfe, 0xd8, 0x86, 0x64, 0xb3, 0x0d, 0xc9, 0xef, 0x6d, 0x48, 0xbe, 0xed, 0xc2, 0xce,
	0x66, 0x17, 0x76, 0x7e, 0xed, 0xc2, 0xce, 0xc7, 0x17, 0x69, 0x66, 0x72, 0xbe, 0x8c, 0x12, 0x79,
	0x17, 0x2b, 0xae, 0xb2, 0x3b, 0x19, 0x1b, 0xad, 0xed, 0xf7, 0x52, 0x7f, 0x4e, 0xe2, 0x72, 0x95,
	0xc6, 0xf6, 0x9e, 0xf5, 0x72, 0xe0, 0x4e, 0xf7, 0xd5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x30,
	0xa7, 0x61, 0x2c, 0xa5, 0x03, 0x00, 0x00,
}

func (m *Session) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Session) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Session) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSession(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Type != 0 {
		i = encodeVarintSession(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x28
	}
	if m.EndBlock != 0 {
		i = encodeVarintSession(dAtA, i, uint64(m.EndBlock))
		i--
		dAtA[i] = 0x20
	}
	if m.StartBlock != 0 {
		i = encodeVarintSession(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintSession(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintSession(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DefaultSessionData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefaultSessionData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultSessionData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintSession(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Accepted) > 0 {
		for iNdEx := len(m.Accepted) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Accepted[iNdEx])
			copy(dAtA[i:], m.Accepted[iNdEx])
			i = encodeVarintSession(dAtA, i, uint64(len(m.Accepted[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Root) > 0 {
		i -= len(m.Root)
		copy(dAtA[i:], m.Root)
		i = encodeVarintSession(dAtA, i, uint64(len(m.Root)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Indexes) > 0 {
		for iNdEx := len(m.Indexes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Indexes[iNdEx])
			copy(dAtA[i:], m.Indexes[iNdEx])
			i = encodeVarintSession(dAtA, i, uint64(len(m.Indexes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintSession(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Parties) > 0 {
		for iNdEx := len(m.Parties) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Parties[iNdEx])
			copy(dAtA[i:], m.Parties[iNdEx])
			i = encodeVarintSession(dAtA, i, uint64(len(m.Parties[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReshareSessionData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReshareSessionData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReshareSessionData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Root) > 0 {
		i -= len(m.Root)
		copy(dAtA[i:], m.Root)
		i = encodeVarintSession(dAtA, i, uint64(len(m.Root)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintSession(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.KeySignature) > 0 {
		i -= len(m.KeySignature)
		copy(dAtA[i:], m.KeySignature)
		i = encodeVarintSession(dAtA, i, uint64(len(m.KeySignature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NewKey) > 0 {
		i -= len(m.NewKey)
		copy(dAtA[i:], m.NewKey)
		i = encodeVarintSession(dAtA, i, uint64(len(m.NewKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OldKey) > 0 {
		i -= len(m.OldKey)
		copy(dAtA[i:], m.OldKey)
		i = encodeVarintSession(dAtA, i, uint64(len(m.OldKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintSession(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Parties) > 0 {
		for iNdEx := len(m.Parties) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Parties[iNdEx])
			copy(dAtA[i:], m.Parties[iNdEx])
			i = encodeVarintSession(dAtA, i, uint64(len(m.Parties[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *KeygenSessionData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeygenSessionData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeygenSessionData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintSession(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Parties) > 0 {
		for iNdEx := len(m.Parties) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Parties[iNdEx])
			copy(dAtA[i:], m.Parties[iNdEx])
			i = encodeVarintSession(dAtA, i, uint64(len(m.Parties[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintSession(dAtA []byte, offset int, v uint64) int {
	offset -= sovSession(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Session) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSession(uint64(m.Id))
	}
	if m.Status != 0 {
		n += 1 + sovSession(uint64(m.Status))
	}
	if m.StartBlock != 0 {
		n += 1 + sovSession(uint64(m.StartBlock))
	}
	if m.EndBlock != 0 {
		n += 1 + sovSession(uint64(m.EndBlock))
	}
	if m.Type != 0 {
		n += 1 + sovSession(uint64(m.Type))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *DefaultSessionData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Parties) > 0 {
		for _, s := range m.Parties {
			l = len(s)
			n += 1 + l + sovSession(uint64(l))
		}
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	if len(m.Indexes) > 0 {
		for _, s := range m.Indexes {
			l = len(s)
			n += 1 + l + sovSession(uint64(l))
		}
	}
	l = len(m.Root)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	if len(m.Accepted) > 0 {
		for _, s := range m.Accepted {
			l = len(s)
			n += 1 + l + sovSession(uint64(l))
		}
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *ReshareSessionData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Parties) > 0 {
		for _, s := range m.Parties {
			l = len(s)
			n += 1 + l + sovSession(uint64(l))
		}
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	l = len(m.OldKey)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	l = len(m.NewKey)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	l = len(m.KeySignature)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	l = len(m.Root)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *KeygenSessionData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Parties) > 0 {
		for _, s := range m.Parties {
			l = len(s)
			n += 1 + l + sovSession(uint64(l))
		}
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func sovSession(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSession(x uint64) (n int) {
	return sovSession(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Session) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Session: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Session: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SessionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlock", wireType)
			}
			m.EndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SessionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &types.Any{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefaultSessionData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefaultSessionData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefaultSessionData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parties", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parties = append(m.Parties, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indexes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Indexes = append(m.Indexes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Root = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accepted", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accepted = append(m.Accepted, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReshareSessionData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReshareSessionData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReshareSessionData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parties", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parties = append(m.Parties, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeySignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Root = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeygenSessionData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeygenSessionData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeygenSessionData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parties", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parties = append(m.Parties, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSession(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSession
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSession
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSession
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSession
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSession
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSession
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSession        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSession          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSession = fmt.Errorf("proto: unexpected end of group")
)
