// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: session.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StepType int32

const (
	StepType_Proposing StepType = 0
	StepType_Accepting StepType = 1
	StepType_Signing   StepType = 2
)

var StepType_name = map[int32]string{
	0: "Proposing",
	1: "Accepting",
	2: "Signing",
}

var StepType_value = map[string]int32{
	"Proposing": 0,
	"Accepting": 1,
	"Signing":   2,
}

func (x StepType) String() string {
	return proto.EnumName(StepType_name, int32(x))
}

func (StepType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{0}
}

type Status int32

const (
	Status_Pending    Status = 0
	Status_Processing Status = 1
	Status_Success    Status = 2
	Status_Failed     Status = 3
)

var Status_name = map[int32]string{
	0: "Pending",
	1: "Processing",
	2: "Success",
	3: "Failed",
}

var Status_value = map[string]int32{
	"Pending":    0,
	"Processing": 1,
	"Success":    2,
	"Failed":     3,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{1}
}

type Step struct {
	StartBlock string   `protobuf:"bytes,1,opt,name=startBlock,proto3" json:"startBlock,omitempty"`
	EndBlock   string   `protobuf:"bytes,2,opt,name=endBlock,proto3" json:"endBlock,omitempty"`
	Type       StepType `protobuf:"varint,3,opt,name=type,proto3,enum=StepType" json:"type,omitempty"`
}

func (m *Step) Reset()         { *m = Step{} }
func (m *Step) String() string { return proto.CompactTextString(m) }
func (*Step) ProtoMessage()    {}
func (*Step) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{0}
}
func (m *Step) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Step) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Step.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Step) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Step.Merge(m, src)
}
func (m *Step) XXX_Size() int {
	return m.Size()
}
func (m *Step) XXX_DiscardUnknown() {
	xxx_messageInfo_Step.DiscardUnknown(m)
}

var xxx_messageInfo_Step proto.InternalMessageInfo

func (m *Step) GetStartBlock() string {
	if m != nil {
		return m.StartBlock
	}
	return ""
}

func (m *Step) GetEndBlock() string {
	if m != nil {
		return m.EndBlock
	}
	return ""
}

func (m *Step) GetType() StepType {
	if m != nil {
		return m.Type
	}
	return StepType_Proposing
}

type Pool struct {
	Indexes    []string `protobuf:"bytes,1,rep,name=indexes,proto3" json:"indexes,omitempty"`
	Root       string   `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
	ProposerId string   `protobuf:"bytes,3,opt,name=proposerId,proto3" json:"proposerId,omitempty"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{1}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func (m *Pool) GetIndexes() []string {
	if m != nil {
		return m.Indexes
	}
	return nil
}

func (m *Pool) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

func (m *Pool) GetProposerId() string {
	if m != nil {
		return m.ProposerId
	}
	return ""
}

type Session struct {
	Id          uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status      Status   `protobuf:"varint,2,opt,name=status,proto3,enum=Status" json:"status,omitempty"`
	Pool        *Pool    `protobuf:"bytes,3,opt,name=pool,proto3" json:"pool,omitempty"`
	Steps       []*Step  `protobuf:"bytes,4,rep,name=steps,proto3" json:"steps,omitempty"`
	CurrentStep StepType `protobuf:"varint,5,opt,name=currentStep,proto3,enum=StepType" json:"currentStep,omitempty"`
	AcceptedId  []string `protobuf:"bytes,6,rep,name=acceptedId,proto3" json:"acceptedId,omitempty"`
	SignedId    []string `protobuf:"bytes,7,rep,name=signedId,proto3" json:"signedId,omitempty"`
}

func (m *Session) Reset()         { *m = Session{} }
func (m *Session) String() string { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()    {}
func (*Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a6be1b361fa6f14, []int{2}
}
func (m *Session) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Session.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session.Merge(m, src)
}
func (m *Session) XXX_Size() int {
	return m.Size()
}
func (m *Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Session proto.InternalMessageInfo

func (m *Session) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Session) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_Pending
}

func (m *Session) GetPool() *Pool {
	if m != nil {
		return m.Pool
	}
	return nil
}

func (m *Session) GetSteps() []*Step {
	if m != nil {
		return m.Steps
	}
	return nil
}

func (m *Session) GetCurrentStep() StepType {
	if m != nil {
		return m.CurrentStep
	}
	return StepType_Proposing
}

func (m *Session) GetAcceptedId() []string {
	if m != nil {
		return m.AcceptedId
	}
	return nil
}

func (m *Session) GetSignedId() []string {
	if m != nil {
		return m.SignedId
	}
	return nil
}

func init() {
	proto.RegisterEnum("StepType", StepType_name, StepType_value)
	proto.RegisterEnum("Status", Status_name, Status_value)
	proto.RegisterType((*Step)(nil), "Step")
	proto.RegisterType((*Pool)(nil), "Pool")
	proto.RegisterType((*Session)(nil), "Session")
}

func init() { proto.RegisterFile("session.proto", fileDescriptor_3a6be1b361fa6f14) }

var fileDescriptor_3a6be1b361fa6f14 = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xc1, 0x6b, 0xdb, 0x30,
	0x14, 0xc6, 0x23, 0xc7, 0xb1, 0xeb, 0x17, 0x1a, 0x82, 0x4e, 0xde, 0xc6, 0xbc, 0x90, 0x53, 0x68,
	0xa9, 0x03, 0x19, 0xbb, 0x0e, 0x56, 0xd8, 0xa0, 0xb7, 0xa0, 0xf4, 0xb4, 0x9b, 0x2b, 0x69, 0x46,
	0xd4, 0x93, 0x84, 0xa4, 0x8c, 0xe5, 0xbf, 0xd8, 0x9f, 0xb5, 0x63, 0x8f, 0x83, 0x5d, 0x46, 0xf2,
	0x8f, 0x0c, 0x3d, 0x37, 0x21, 0xf4, 0xe6, 0xef, 0xf7, 0xf1, 0x3e, 0xde, 0xf7, 0x2c, 0xb8, 0xf4,
	0xd2, 0x7b, 0x65, 0x74, 0x6d, 0x9d, 0x09, 0x66, 0xde, 0x40, 0xba, 0x09, 0xd2, 0xd2, 0x0a, 0xc0,
	0x87, 0xc6, 0x85, 0xdb, 0xce, 0xf0, 0xc7, 0x92, 0xcc, 0xc8, 0xa2, 0x60, 0x67, 0x84, 0xbe, 0x86,
	0x0b, 0xa9, 0x45, 0xef, 0x26, 0xe8, 0x9e, 0x34, 0x7d, 0x0b, 0x69, 0xd8, 0x59, 0x59, 0x0e, 0x67,
	0x64, 0x31, 0x59, 0x15, 0x75, 0x0c, 0xbc, 0xdf, 0x59, 0xc9, 0x10, 0xcf, 0xef, 0x21, 0x5d, 0x1b,
	0xd3, 0xd1, 0x12, 0x72, 0xa5, 0x85, 0xfc, 0x29, 0x7d, 0x49, 0x66, 0xc3, 0x45, 0xc1, 0x8e, 0x92,
	0x52, 0x48, 0x9d, 0x31, 0xe1, 0x39, 0x18, 0xbf, 0xe3, 0x42, 0xd6, 0x19, 0x6b, 0xbc, 0x74, 0x77,
	0x02, 0xa3, 0x0b, 0x76, 0x46, 0xe6, 0x7f, 0x09, 0xe4, 0x9b, 0xbe, 0x0a, 0x9d, 0x40, 0xa2, 0x04,
	0x2e, 0x9d, 0xb2, 0x44, 0x09, 0xfa, 0x0e, 0x32, 0x1f, 0x9a, 0xb0, 0xf5, 0x98, 0x38, 0x59, 0xe5,
	0xf5, 0x06, 0x25, 0x7b, 0xc6, 0xf4, 0x15, 0xa4, 0xd6, 0x98, 0x0e, 0x63, 0xc7, 0xab, 0x51, 0x1d,
	0xf7, 0x63, 0x88, 0xe8, 0x1b, 0x18, 0xf9, 0x20, 0xad, 0x2f, 0xd3, 0xd9, 0x10, 0xbd, 0xd8, 0x86,
	0xf5, 0x8c, 0x5e, 0xc3, 0x98, 0x6f, 0x9d, 0x93, 0x3a, 0x44, 0x5a, 0x8e, 0x5e, 0x16, 0x3e, 0x77,
	0x63, 0x83, 0x86, 0x73, 0x69, 0x83, 0x14, 0x77, 0xa2, 0xcc, 0xb0, 0xf2, 0x19, 0x89, 0x27, 0xf5,
	0xaa, 0xd5, 0xe8, 0xe6, 0xe8, 0x9e, 0xf4, 0xd5, 0x07, 0xb8, 0x38, 0x86, 0xd2, 0x4b, 0x28, 0xd6,
	0xd8, 0x5b, 0xe9, 0x76, 0x3a, 0x88, 0xf2, 0x13, 0x86, 0x44, 0x49, 0xe8, 0x18, 0xf2, 0x8d, 0x6a,
	0x75, 0x14, 0xc9, 0xd5, 0x47, 0xc8, 0xfa, 0xa6, 0x11, 0xaf, 0xa5, 0x16, 0xfd, 0xc8, 0x04, 0x60,
	0xed, 0x0c, 0x8f, 0xd7, 0x3a, 0xcd, 0x6c, 0x79, 0xd4, 0xd3, 0x84, 0x02, 0x64, 0x5f, 0x1a, 0xd5,
	0x49, 0x31, 0x1d, 0xde, 0x7e, 0xfe, 0xbd, 0xaf, 0xc8, 0xd3, 0xbe, 0x22, 0xff, 0xf6, 0x15, 0xf9,
	0x75, 0xa8, 0x06, 0x4f, 0x87, 0x6a, 0xf0, 0xe7, 0x50, 0x0d, 0xbe, 0x5e, 0xb7, 0x2a, 0x74, 0xcd,
	0x43, 0xcd, 0xcd, 0xf7, 0xa5, 0x6b, 0x9c, 0xfa, 0xb6, 0xbb, 0xc1, 0x07, 0xc4, 0xcd, 0x32, 0x78,
	0x7f, 0xe3, 0x7f, 0xf0, 0xa5, 0x7d, 0x6c, 0x97, 0xf1, 0x87, 0xfb, 0x87, 0x0c, 0xad, 0xf7, 0xff,
	0x03, 0x00, 0x00, 0xff, 0xff, 0xbc, 0x5b, 0x0b, 0xbc, 0x6c, 0x02, 0x00, 0x00,
}

func (m *Step) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Step) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Step) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintSession(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.EndBlock) > 0 {
		i -= len(m.EndBlock)
		copy(dAtA[i:], m.EndBlock)
		i = encodeVarintSession(dAtA, i, uint64(len(m.EndBlock)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StartBlock) > 0 {
		i -= len(m.StartBlock)
		copy(dAtA[i:], m.StartBlock)
		i = encodeVarintSession(dAtA, i, uint64(len(m.StartBlock)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProposerId) > 0 {
		i -= len(m.ProposerId)
		copy(dAtA[i:], m.ProposerId)
		i = encodeVarintSession(dAtA, i, uint64(len(m.ProposerId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Root) > 0 {
		i -= len(m.Root)
		copy(dAtA[i:], m.Root)
		i = encodeVarintSession(dAtA, i, uint64(len(m.Root)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Indexes) > 0 {
		for iNdEx := len(m.Indexes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Indexes[iNdEx])
			copy(dAtA[i:], m.Indexes[iNdEx])
			i = encodeVarintSession(dAtA, i, uint64(len(m.Indexes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Session) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Session) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Session) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignedId) > 0 {
		for iNdEx := len(m.SignedId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SignedId[iNdEx])
			copy(dAtA[i:], m.SignedId[iNdEx])
			i = encodeVarintSession(dAtA, i, uint64(len(m.SignedId[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.AcceptedId) > 0 {
		for iNdEx := len(m.AcceptedId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AcceptedId[iNdEx])
			copy(dAtA[i:], m.AcceptedId[iNdEx])
			i = encodeVarintSession(dAtA, i, uint64(len(m.AcceptedId[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.CurrentStep != 0 {
		i = encodeVarintSession(dAtA, i, uint64(m.CurrentStep))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Steps) > 0 {
		for iNdEx := len(m.Steps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Steps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSession(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Pool != nil {
		{
			size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSession(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintSession(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintSession(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSession(dAtA []byte, offset int, v uint64) int {
	offset -= sovSession(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Step) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StartBlock)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	l = len(m.EndBlock)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovSession(uint64(m.Type))
	}
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Indexes) > 0 {
		for _, s := range m.Indexes {
			l = len(s)
			n += 1 + l + sovSession(uint64(l))
		}
	}
	l = len(m.Root)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	l = len(m.ProposerId)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *Session) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSession(uint64(m.Id))
	}
	if m.Status != 0 {
		n += 1 + sovSession(uint64(m.Status))
	}
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if len(m.Steps) > 0 {
		for _, e := range m.Steps {
			l = e.Size()
			n += 1 + l + sovSession(uint64(l))
		}
	}
	if m.CurrentStep != 0 {
		n += 1 + sovSession(uint64(m.CurrentStep))
	}
	if len(m.AcceptedId) > 0 {
		for _, s := range m.AcceptedId {
			l = len(s)
			n += 1 + l + sovSession(uint64(l))
		}
	}
	if len(m.SignedId) > 0 {
		for _, s := range m.SignedId {
			l = len(s)
			n += 1 + l + sovSession(uint64(l))
		}
	}
	return n
}

func sovSession(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSession(x uint64) (n int) {
	return sovSession(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Step) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Step: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Step: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartBlock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndBlock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= StepType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indexes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Indexes = append(m.Indexes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Root = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Session) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Session: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Session: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pool == nil {
				m.Pool = &Pool{}
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Steps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Steps = append(m.Steps, &Step{})
			if err := m.Steps[len(m.Steps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentStep", wireType)
			}
			m.CurrentStep = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentStep |= StepType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptedId = append(m.AcceptedId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedId = append(m.SignedId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSession(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSession
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSession
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSession
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSession
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSession
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSession
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSession        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSession          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSession = fmt.Errorf("proto: unexpected end of group")
)
