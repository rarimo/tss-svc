// Package pg contains generated code for schema 'public'.
package pg

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"

	"gitlab.com/distributed_lab/kit/pgdb"
	"gitlab.com/distributed_lab/logan/v3/errors"
	"gitlab.com/rarify-protocol/tss-svc/internal/data"
)

// Storage is the helper struct for database operations
type Storage struct {
	db *pgdb.DB
}

// New - returns new instance of storage
func New(db *pgdb.DB) *Storage {
	return &Storage{
		db,
	}
}

// DB - returns db used by Storage
func (s *Storage) DB() *pgdb.DB {
	return s.db
}

// Clone - returns new storage with clone of db
func (s *Storage) Clone() *Storage {
	return New(s.db.Clone())
}

// Transaction begins a transaction on repo.
func (s *Storage) Transaction(tx func() error) error {
	return s.db.Transaction(tx)
} // GorpMigrationQ represents helper struct to access row of 'gorp_migrations'.
type GorpMigrationQ struct {
	db *pgdb.DB
}

// NewGorpMigrationQ  - creates new instance
func NewGorpMigrationQ(db *pgdb.DB) *GorpMigrationQ {
	return &GorpMigrationQ{
		db,
	}
}

// GorpMigrationQ  - creates new instance of GorpMigrationQ
func (s Storage) GorpMigrationQ() *GorpMigrationQ {
	return NewGorpMigrationQ(s.DB())
}

var colsGorpMigration = `id, applied_at`

// InsertCtx inserts a GorpMigration to the database.
func (q GorpMigrationQ) InsertCtx(ctx context.Context, gm *data.GorpMigration) error {
	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO public.gorp_migrations (` +
		`id, applied_at` +
		`) VALUES (` +
		`$1, $2` +
		`)`
	// run
	err := q.db.ExecRawContext(ctx, sqlstr, gm.ID, gm.AppliedAt)
	return errors.Wrap(err, "failed to execute insert query")
}

// Insert insert a GorpMigration to the database.
func (q GorpMigrationQ) Insert(gm *data.GorpMigration) error {
	return q.InsertCtx(context.Background(), gm)
}

// UpdateCtx updates a GorpMigration in the database.
func (q GorpMigrationQ) UpdateCtx(ctx context.Context, gm *data.GorpMigration) error {
	// update with composite primary key
	sqlstr := `UPDATE public.gorp_migrations SET ` +
		`applied_at = $1 ` +
		`WHERE id = $2`
	// run
	err := q.db.ExecRawContext(ctx, sqlstr, gm.AppliedAt, gm.ID)
	return errors.Wrap(err, "failed to execute update")
}

// Update updates a GorpMigration in the database.
func (q GorpMigrationQ) Update(gm *data.GorpMigration) error {
	return q.UpdateCtx(context.Background(), gm)
}

// UpsertCtx performs an upsert for GorpMigration.
func (q GorpMigrationQ) UpsertCtx(ctx context.Context, gm *data.GorpMigration) error {
	// upsert
	sqlstr := `INSERT INTO public.gorp_migrations (` +
		`id, applied_at` +
		`) VALUES (` +
		`$1, $2` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`applied_at = EXCLUDED.applied_at `
	// run
	if err := q.db.ExecRawContext(ctx, sqlstr, gm.ID, gm.AppliedAt); err != nil {
		return errors.Wrap(err, "failed to execute upsert stmt")
	}
	return nil
}

// Upsert performs an upsert for GorpMigration.
func (q GorpMigrationQ) Upsert(gm *data.GorpMigration) error {
	return q.UpsertCtx(context.Background(), gm)
}

// DeleteCtx deletes the GorpMigration from the database.
func (q GorpMigrationQ) DeleteCtx(ctx context.Context, gm *data.GorpMigration) error {
	// delete with single primary key
	sqlstr := `DELETE FROM public.gorp_migrations ` +
		`WHERE id = $1`
	// run
	if err := q.db.ExecRawContext(ctx, sqlstr, gm.ID); err != nil {
		return errors.Wrap(err, "failed to exec delete stmt")
	}
	return nil
}

// Delete deletes the GorpMigration from the database.
func (q GorpMigrationQ) Delete(gm *data.GorpMigration) error {
	return q.DeleteCtx(context.Background(), gm)
} // SessionQ represents helper struct to access row of 'sessions'.
type SessionQ struct {
	db *pgdb.DB
}

// NewSessionQ  - creates new instance
func NewSessionQ(db *pgdb.DB) *SessionQ {
	return &SessionQ{
		db,
	}
}

// SessionQ  - creates new instance of SessionQ
func (s Storage) SessionQ() *SessionQ {
	return NewSessionQ(s.DB())
}

var colsSession = `id, status, indexes, root, proposer, begin_block, accepted, signed`

// InsertCtx inserts a Session to the database.
func (q SessionQ) InsertCtx(ctx context.Context, s *data.Session) error {
	// sql insert query, primary key must be provided
	sqlstr := `INSERT INTO public.sessions (` +
		`id, status, indexes, root, proposer, begin_block, accepted, signed` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)`
	// run
	err := q.db.ExecRawContext(ctx, sqlstr, s.ID, s.Status, s.Indexes, s.Root, s.Proposer, s.BeginBlock, s.Accepted, s.Signed)
	return errors.Wrap(err, "failed to execute insert query")
}

// Insert insert a Session to the database.
func (q SessionQ) Insert(s *data.Session) error {
	return q.InsertCtx(context.Background(), s)
}

// UpdateCtx updates a Session in the database.
func (q SessionQ) UpdateCtx(ctx context.Context, s *data.Session) error {
	// update with composite primary key
	sqlstr := `UPDATE public.sessions SET ` +
		`status = $1, indexes = $2, root = $3, proposer = $4, begin_block = $5, accepted = $6, signed = $7 ` +
		`WHERE id = $8`
	// run
	err := q.db.ExecRawContext(ctx, sqlstr, s.Status, s.Indexes, s.Root, s.Proposer, s.BeginBlock, s.Accepted, s.Signed, s.ID)
	return errors.Wrap(err, "failed to execute update")
}

// Update updates a Session in the database.
func (q SessionQ) Update(s *data.Session) error {
	return q.UpdateCtx(context.Background(), s)
}

// UpsertCtx performs an upsert for Session.
func (q SessionQ) UpsertCtx(ctx context.Context, s *data.Session) error {
	// upsert
	sqlstr := `INSERT INTO public.sessions (` +
		`id, status, indexes, root, proposer, begin_block, accepted, signed` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`status = EXCLUDED.status, indexes = EXCLUDED.indexes, root = EXCLUDED.root, proposer = EXCLUDED.proposer, begin_block = EXCLUDED.begin_block, accepted = EXCLUDED.accepted, signed = EXCLUDED.signed `
	// run
	if err := q.db.ExecRawContext(ctx, sqlstr, s.ID, s.Status, s.Indexes, s.Root, s.Proposer, s.BeginBlock, s.Accepted, s.Signed); err != nil {
		return errors.Wrap(err, "failed to execute upsert stmt")
	}
	return nil
}

// Upsert performs an upsert for Session.
func (q SessionQ) Upsert(s *data.Session) error {
	return q.UpsertCtx(context.Background(), s)
}

// DeleteCtx deletes the Session from the database.
func (q SessionQ) DeleteCtx(ctx context.Context, s *data.Session) error {
	// delete with single primary key
	sqlstr := `DELETE FROM public.sessions ` +
		`WHERE id = $1`
	// run
	if err := q.db.ExecRawContext(ctx, sqlstr, s.ID); err != nil {
		return errors.Wrap(err, "failed to exec delete stmt")
	}
	return nil
}

// Delete deletes the Session from the database.
func (q SessionQ) Delete(s *data.Session) error {
	return q.DeleteCtx(context.Background(), s)
}

// GorpMigrationByIDCtx retrieves a row from 'public.gorp_migrations' as a GorpMigration.
//
// Generated from index 'gorp_migrations_pkey'.
func (q GorpMigrationQ) GorpMigrationByIDCtx(ctx context.Context, id string, isForUpdate bool) (*data.GorpMigration, error) {
	// query
	sqlstr := `SELECT ` +
		`id, applied_at ` +
		`FROM public.gorp_migrations ` +
		`WHERE id = $1`
	// run
	if isForUpdate {
		sqlstr += " for update"
	}
	var res data.GorpMigration
	err := q.db.GetRawContext(ctx, &res, sqlstr, id)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, nil
		}

		return nil, errors.Wrap(err, "failed to exec select")
	}

	return &res, nil
}

// GorpMigrationByID retrieves a row from 'public.gorp_migrations' as a GorpMigration.
//
// Generated from index 'gorp_migrations_pkey'.
func (q GorpMigrationQ) GorpMigrationByID(id string, isForUpdate bool) (*data.GorpMigration, error) {
	return q.GorpMigrationByIDCtx(context.Background(), id, isForUpdate)
}

// SessionByIDCtx retrieves a row from 'public.sessions' as a Session.
//
// Generated from index 'sessions_pkey'.
func (q SessionQ) SessionByIDCtx(ctx context.Context, id int64, isForUpdate bool) (*data.Session, error) {
	// query
	sqlstr := `SELECT ` +
		`id, status, indexes, root, proposer, begin_block, accepted, signed ` +
		`FROM public.sessions ` +
		`WHERE id = $1`
	// run
	if isForUpdate {
		sqlstr += " for update"
	}
	var res data.Session
	err := q.db.GetRawContext(ctx, &res, sqlstr, id)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, nil
		}

		return nil, errors.Wrap(err, "failed to exec select")
	}

	return &res, nil
}

// SessionByID retrieves a row from 'public.sessions' as a Session.
//
// Generated from index 'sessions_pkey'.
func (q SessionQ) SessionByID(id int64, isForUpdate bool) (*data.Session, error) {
	return q.SessionByIDCtx(context.Background(), id, isForUpdate)
}
